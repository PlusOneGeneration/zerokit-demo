const _ = require('lodash');

module.exports = (mongoose) => {
    const Schema = mongoose.Schema;

    const registrationInfoSchema = new Schema({
        /**
         * Registration session id received from the tenant server at initiate-user-registration
         * It's used during client side registartion
         */
        sessionId: {type: String},
        /**
         * Registration session verifier received from the tenant server at initiate-user-registration
         * It's used during validation, should never be returned to the client
         */
        sessionVerifier: {type: String},
        /**
         * Validation verifier received from the client sdk
         * It's used during validation, should never be returned to the client.
         */
        validationVerifier: {type: String},
        /**
         * A validation code generated by our code. Using this the app can implement an out of band validation process.
         * It's used to initiate validation, should be sent to the client on a different channel or used by an administratior
         * to activate the user after the registration was validated. It's intended to be included in a link that
         * is sent to the user in an email.
         */
        validationCode: {type: String}
    });

    const userSchema = new Schema({
        /**
         * The userName that can be used when logging in.
         */
        email: {type: String, required: true, unique: true},
        /**
         * The id of the user in the zerokit sdk. We use this internally too, because it's unique and we have to store it anyway.
         */
        zkitId: {type: String, unique: true},
        /**
         * Data used during the registration-validation process
         */
        registrationData: {type: registrationInfoSchema},
        /**
         * The state of the user
         * 0: Initiated registration
         * 1: Finished registration
         * 2: validated
         */
        state: {type: Number, required: true},
        /**
         * Arbitrary profile data that can be accessed by the user.
         */
        profileData: {type: String},
        /**
         * Arbitrary public profile data that can be accessed by any logged in user.
         */
        publicProfileData: {type: String}
    });

    return mongoose.model("User", userSchema);
}